#!/usr/bin/env bash

set -euo pipefail
OPTIND=1

DRY_RUN=false
BACKUP=true

# The "--canonicalize" flag in readlink isn't available cross-platform, sadly.
script="import os,sys ; print os.path.realpath(sys.argv[1])"
dotfile_dir="$(python -c "$script" .)"

run() {
    local command_string=
    for arg in "$@" ; do
        if echo "$arg" | grep "\s" > /dev/null ; then
            command_string+="\"$arg\" "
        else
            command_string+="$arg "
        fi
    done

    if $DRY_RUN ; then
        echo "$command_string"
    else
        eval "$command_string"
    fi
}

get_user_data() {
    local input_type="$1"
    local input_value
    while true ; do
        read -p "Enter your $input_type: " input_value
        if [ "$input_value" ] ; then
            break
        else
            >&2 echo "Please supply your $input_type."
        fi
    done
    echo "$input_value"
}

link_file() {
    local source_file="$1"
    local target_file="$2"

    if $BACKUP && [ -f "$target_file" -o -d "$target_file" ] ; then
        run mv "$target_file" "${target_file}".old
    fi
    run ln -s "$source_file" "$target_file"
}

prompt_user() {
    while true ; do
        read -p "$1 [y/n]:" yn
        case "$yn" in
            [Yy]* ) return 0 ; break ;;
            [Nn]* ) return 1 ; break ;;
            * ) echo "Please answer yes or no." ;;
        esac
    done
}

install_bash() {(
    echo "*** Installing bash dotfiles."
    cd ~

    link_file "$dotfile_dir"/bash/bashrc .bashrc
    link_file "$dotfile_dir"/bash/bash_profile .bash_profile
    link_file "$dotfile_dir"/bash/bash_aliases .bash_aliases
)}

install_emacs() {(
    echo "*** Installing emacs dotfiles (spacemacs)."
    cd ~

    link_file "$dotfile_dir"/emacs .emacs.d
)}

install_haskell() {(
    echo "*** Installing Haskell dotfiles."
    cd ~

    run mkdir -p .ghc
    link_file "$dotfile_dir"/ghc/ghci.conf .ghc/ghci.conf
)}

install_git() {(
    echo "*** Installing git dotfiles."
    local author_name=
    local author_email=
    if [ "${1:-}" ] ; then
        author_name="$1"
        author_email="$2"
    else
        author_name="$(get_user_data name)"
        author_email="$(get_user_data email)"
    fi

    cd ~

    link_file "$dotfile_dir"/git/gitconfig .gitconfig
    run cp -r "$dotfile_dir"/git/git_template .git_template

    run git config --global user.name "$author_name"
    run git config --global user.email "$author_email"
)}

install_tmux() {(
    echo "*** Installing tmux dotfiles."
    cd ~

    link_file "$dotfile_dir"/tmux/tmux.conf .tmux.conf
)}

install_vim() {(
    echo "*** Installing vim dotfiles."
    cd ~

    run mkdir -p .vim
    link_file "$dotfile_dir"/vim/vimrc .vimrc
    link_file "$dotfile_dir"/vim/autoload .vim/autoload
    link_file "$dotfile_dir"/vim/colors .vim/colors
    link_file "$dotfile_dir"/vim/ftdetect .vim/ftdetect
    link_file "$dotfile_dir"/vim/ftplugin .vim/ftplugin
    link_file "$dotfile_dir"/vim/bundle .vim/bundle
)}

usage() {
    echo "usage: $(basename "$0") [OPTIONS]"
    echo -e "\t-a name  Git author name"
    echo -e "\t-b       Install bash dotfiles"
    echo -e "\t-e email Git author email"
    echo -e "\t-f       Overwrite current dotfiles without backing up"
    echo -e "\t-g       Install git dotfiles"
    echo -e "\t-h       Show this usage message"
    echo -e "\t-l       Install Haskell dotfiles"
    echo -e "\t-n       Perform a dry run of all effectful operations"
    echo -e "\t-t       Install tmux dotfiles"
    echo -e "\t-v       Install vim dotfiles"
}

main() {
    local noprompt=false
    local author_name=
    local author_email=
    local modules=

    while getopts "a:be:fghlntvx" opt ; do
        case "$opt" in
            a )
                author_name="$OPTARG" ;;
            b )
                modules="${modules}bash " ;;
            e )
                author_email="$OPTARG" ;;
            f )
                BACKUP=false ;;
            g )
                modules="${modules}git " ;;
            h )
                usage
                exit 0 ;;
            l )
                modules="${modules}haskell " ;;
            n )
                DRY_RUN=true ;;
            t )
                modules="${modules}tmux " ;;
            v )
                modules="${modules}vim " ;;
            x )
                modules="${modules}emacs " ;;
        esac
    done

    if [ -n "$modules" ] ; then
        if echo "$modules" | grep git >/dev/null && \
                [ -z "$author_name" -o -z "$author_email" ] ; then
            echo "Must provide author name/email if installing git"
            usage
            exit 3
        fi

        for m in $modules ; do
            case "$m" in
                "bash" ) install_bash ;;
                "emacs" ) install_emacs ;;
                "haskell" ) install_haskell ;;
                "git" ) install_git "$author_name" "$author_email" ;;
                "tmux" ) install_tmux ;;
                "vim" ) install_vim ;;
            esac
        done
    else
        for m in bash emacs haskell git tmux vim ; do
            if prompt_user "Install $m configs?" ; then
                "install_${m}"
            fi
        done
    fi
}

main "$@"
